# ------------------------------------ ORB Detector Configuration ------------------------------------
# Implements the ORB (oriented BRIEF) keypoint detector and descriptor extractor, described in 'Ethan
#  Rublee, Vincent Rabaud, Kurt Konolige, Gary R. Bradski: ORB: An efficient alternative to SIFT or
#  SURF. ICCV 2011: 2564-2571'. The algorithm uses FAST in pyramids to detect stable keypoints,
#  selects the strongest features using FAST or Harris response, finds their orientation using
#  first-order moments and computes the descriptors using BRIEF (where the coordinates of random
#  point pairs (or k-tuples) are rotated according to the measured orientation). For further details
#  see: http://docs.opencv.org/2.4/modules/features2d/doc/feature_detection_and_description.html#orb


# Determines whether or not the detector will be used. If set to false, attempting to use the
#  detector will yield no results.
# Possible Values: 'True' or 'False'
# Default: True
Enabled=True

# Set the descriptor extractor type. Possible values are 'ORB', 'SURF', 'SIFT', 'BRIEF', and 'BRISK'.
# Possible Values: 'ORB', 'SURF', 'SIFT', 'BRIEF', 'BRISK'
# Default: ORB
Extractor=ORB

# Largest allowable keypoint distance between two features to be considered a valid match using this
#  detector.
# Possible Values: Integer in range [1, 100]
# Default: 50
Keypoint Limit=50

# The maximum number of features to retain.
# Possible Values: Integer
# Default: 500
Num Features=500

# Pyramid decimation ratio, greater than 1. scaleFactor==2 means the classical pyramid, where each
#  next level has 4x less pixels than the previous, but such a big scale factor will degrade feature
#  matching scores dramatically. On the other hand, too close to 1 scale factor will mean that to
#  cover certain scale range you will need more pyramid levels and so the speed will suffer.
# Possible Values: Float >= 1.001
# Default: 1.2
Scale Factor=1.2

# The number of pyramid levels. The smallest level will have linear size equal to
#  input_image_linear_size/pow(scaleFactor, nlevels).
# Possible Values: Integer >= 1
# Default: 8
Num Levels=8

# This is size of the border where the features are not detected. It should roughly match the
#  patchSize parameter.
# Possible Values: Integer
# Default: 31
Edge Threshold=31

# Should be 0 in the current implementation.
# Possible Values: Integer in range [0, 0]
# Default: 0
First Level=0

# The number of points that produce each element of the oriented BRIEF descriptor. The default value
#  2 means the BRIEF where we take a random point pair and compare their brightnesses, so we get 0/1
#  response. Other possible values are 3 and 4. For example, 3 means that we take 3 random points (of
#  course, those point coordinates are random, but they are generated from the pre-defined seed, so
#  each element of BRIEF descriptor is computed deterministically from the pixel rectangle), find
#  point of maximum brightness and output index of the winner (0, 1 or 2). Such output will occupy 2
#  bits, and therefore it will need a special variant of Hamming distance, denoted as NORM_HAMMING2
#  (2 bits per bin). When WTA_K=4, we take 4 random points to compute each bin (that will also occupy
#  2 bits with possible values 0, 1, 2 or 3).
# Possible Values: '2', '3', '4'
# Default: 2
WTA_K=2

# The default HARRIS_SCORE means that Harris algorithm is used to rank features (the score is written
#  to KeyPoint::score and is used to retain best nfeatures features); FAST_SCORE is alternative value
#  of the parameter that produces slightly less stable keypoints, but it is a little faster to
#  compute.
# Possible Values: 'HARRIS_SCORE', 'FAST_SCORE'
# Default: HARRIS_SCORE
Score Type=HARRIS_SCORE

# Size of the patch used by the oriented BRIEF descriptor. Of course, on smaller pyramid layers the
#  perceived image area covered by a feature will be larger.
# Possible Values: Integer
# Default: 31
Patch Size=31